// Note: This entire service file is NOT used when using NgRx.

import * as firebase from 'firebase';
import { Router } from '@angular/router';
import { Injectable } from '@angular/core';
import { Store } from '@ngrx/store';

import * as fromApp from '../store/app.reducers';
import * as AuthActions from './store/auth.actions';

@Injectable()
export class AuthService {
  //token: string;   // Made unnecessary when using NgRx store.

  constructor(private router: Router, private store: Store<fromApp.AppState>) {} 

  signupUser(email: string, password: string) {
    firebase.auth().createUserWithEmailAndPassword(email, password)   // Promise returned here.
      .then(
        user => {
          this.store.dispatch(new AuthActions.Signup());  // Synchronous state action done asynchronously.
          
          // Grab the token generated by the signup and put it into our state.
          firebase.auth().currentUser.getIdToken()    // Returns a promise. Async because verification 
                                                      //  of "token is active" requires a firebase access.
            .then(
              (token: string) => {
              this.store.dispatch(new AuthActions.SetToken(token)); // Synch state action done asynchronously.
              }
            )
        }
      )
      .catch(
        error => console.log(error)
      )
  }

  signinUser(email: string, password: string) {
    firebase.auth().signInWithEmailAndPassword(email, password)       // Promise returned here.
      .then(
        response => {
          this.store.dispatch(new AuthActions.Signin());  // Synchronous state action done asynchronously.
          this.router.navigate(['/']);
          firebase.auth().currentUser.getIdToken()    // Returns a promise. Async because verification 
                                                      //  of "token is active" requires a firebase access.
            .then(
              (token: string) => {
                this.store.dispatch(new AuthActions.SetToken(token)); // Synch state action done asynchronously.
              }
            )
        }
      )
      .catch(
        error => console.log(error)
      )
  }

  logout() {
    firebase.auth().signOut();
    this.store.dispatch(new AuthActions.Logout());
  }

  // Made unnecessary when using NgRx store.

  // getToken() {
  //   firebase.auth().currentUser.getIdToken()   // Returns a promise. Async because verification 
  //     .then(                                   // of "token is active" requires a firebase access.
  //       (token: string) => this.token = token
  //     );
  //   return this.token;                      // MOST of the time, this token will be current/active!                                                             // Otherwise, set up a retry. Done this way as a
  //                                           // convenience for accessing this function since it is called
  //                                           // only for actual database operations AFTER a login that 
  //                                           // iniitally sets the token.
  // }

  // isAuthenticated() {
  //   return this.token != null;
  // }
}